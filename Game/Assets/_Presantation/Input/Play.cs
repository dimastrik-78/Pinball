//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Presantation/Input/Play.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Play : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Play()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Play"",
    ""maps"": [
        {
            ""name"": ""New action map"",
            ""id"": ""586921d0-2e51-41a0-8536-fd68b993fc23"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""eff0d9d2-e898-474f-99eb-85ad2d03e0ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ba280979-ba7c-42db-8580-00a44dc6b133"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96103bed-6482-4be8-b39c-41a7d21cc486"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Stick"",
            ""id"": ""9513d0fc-347c-4488-a78b-f16ccae3fe2f"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""22034703-ecd9-4e96-b9a3-1637cf29d728"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""fba65148-76cf-4231-a228-708a5f8f23f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ab69801-ee2b-4590-ae1b-71d07370fb13"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""484ba4b3-7f79-42ec-b1d5-10271a6c9899"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // New action map
        m_Newactionmap = asset.FindActionMap("New action map", throwIfNotFound: true);
        m_Newactionmap_Start = m_Newactionmap.FindAction("Start", throwIfNotFound: true);
        // Stick
        m_Stick = asset.FindActionMap("Stick", throwIfNotFound: true);
        m_Stick_Left = m_Stick.FindAction("Left", throwIfNotFound: true);
        m_Stick_Right = m_Stick.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // New action map
    private readonly InputActionMap m_Newactionmap;
    private INewactionmapActions m_NewactionmapActionsCallbackInterface;
    private readonly InputAction m_Newactionmap_Start;
    public struct NewactionmapActions
    {
        private @Play m_Wrapper;
        public NewactionmapActions(@Play wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_Newactionmap_Start;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewactionmapActions set) { return set.Get(); }
        public void SetCallbacks(INewactionmapActions instance)
        {
            if (m_Wrapper.m_NewactionmapActionsCallbackInterface != null)
            {
                @Start.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnStart;
            }
            m_Wrapper.m_NewactionmapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
            }
        }
    }
    public NewactionmapActions @Newactionmap => new NewactionmapActions(this);

    // Stick
    private readonly InputActionMap m_Stick;
    private IStickActions m_StickActionsCallbackInterface;
    private readonly InputAction m_Stick_Left;
    private readonly InputAction m_Stick_Right;
    public struct StickActions
    {
        private @Play m_Wrapper;
        public StickActions(@Play wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_Stick_Left;
        public InputAction @Right => m_Wrapper.m_Stick_Right;
        public InputActionMap Get() { return m_Wrapper.m_Stick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StickActions set) { return set.Get(); }
        public void SetCallbacks(IStickActions instance)
        {
            if (m_Wrapper.m_StickActionsCallbackInterface != null)
            {
                @Left.started -= m_Wrapper.m_StickActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_StickActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_StickActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_StickActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_StickActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_StickActionsCallbackInterface.OnRight;
            }
            m_Wrapper.m_StickActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
            }
        }
    }
    public StickActions @Stick => new StickActions(this);
    public interface INewactionmapActions
    {
        void OnStart(InputAction.CallbackContext context);
    }
    public interface IStickActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
